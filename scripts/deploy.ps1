# Script de despliegue para Windows PowerShell

param(
    [string]$Stage = "dev",
    [string]$Region = "us-east-1",
    [string]$Profile = "default"
)

Write-Host "üöÄ Desplegando CloudPF Ingesta en Tiempo Real" -ForegroundColor Green
Write-Host "Stage: $Stage"
Write-Host "Region: $Region"
Write-Host "Profile: $Profile"

# Validar credenciales de AWS
Write-Host "üîë Validando credenciales de AWS..."
try {
    aws sts get-caller-identity --profile $Profile | Out-Null
    Write-Host "‚úÖ Credenciales de AWS validadas" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: No se pueden obtener las credenciales de AWS" -ForegroundColor Red
    Write-Host "Aseg√∫rate de tener configurado AWS CLI con el profile: $Profile" -ForegroundColor Yellow
    exit 1
}

# Instalar dependencias
Write-Host "üì¶ Instalando dependencias..."
npm ci

# Construir el proyecto
Write-Host "üèóÔ∏è Construyendo el proyecto..."
try {
    npm run build
} catch {
    Write-Host "Build script no encontrado, continuando..." -ForegroundColor Yellow
}

# Configurar ElasticSearch local para desarrollo
if ($Stage -eq "dev") {
    Write-Host "üîç Configurando ElasticSearch local..."
    
    # Verificar si Docker est√° corriendo
    try {
        docker info | Out-Null
        Write-Host "‚úÖ Docker est√° corriendo" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Docker no est√° corriendo" -ForegroundColor Yellow
        Write-Host "Por favor, inicia Docker Desktop"
        Read-Host "Presiona Enter cuando Docker est√© listo"
    }
    
    # Iniciar ElasticSearch con Docker Compose
    Write-Host "üê≥ Iniciando ElasticSearch con Docker Compose..."
    Set-Location docker
    docker-compose up -d
    Set-Location ..
    
    # Esperar a que ElasticSearch est√© listo
    Write-Host "‚è≥ Esperando a que ElasticSearch est√© listo..."
    $timeout = 60
    $elapsed = 0
    do {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:9200/_cluster/health" -TimeoutSec 5
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ ElasticSearch est√° listo" -ForegroundColor Green
                break
            }
        } catch {
            Start-Sleep -Seconds 2
            $elapsed += 2
        }
    } while ($elapsed -lt $timeout)
    
    if ($elapsed -ge $timeout) {
        Write-Host "‚ùå ElasticSearch no est√° respondiendo despu√©s de 60 segundos" -ForegroundColor Red
        exit 1
    }
    
    # Configurar √≠ndices
    Write-Host "üîß Configurando √≠ndices de ElasticSearch..."
    $env:STAGE = $Stage
    $env:TENANT_IDS = "tenant1,tenant2,tenant3"
    node scripts/setup-elasticsearch.js
}

# Desplegar funciones Lambda
Write-Host "‚òÅÔ∏è  Desplegando funciones Lambda..."
npx serverless deploy --stage $Stage --region $Region --aws-profile $Profile

# Crear tablas de Athena
Write-Host "üóÑÔ∏è  Creando tablas de Athena..."
$env:STAGE = $Stage
node scripts/create-athena-tables.js

# Verificar deployment
Write-Host "üîç Verificando deployment..."
try {
    npx serverless info --stage $Stage --region $Region --aws-profile $Profile | Out-Null
    Write-Host "‚úÖ Deployment verificado correctamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error en la verificaci√≥n del deployment" -ForegroundColor Red
    exit 1
}

# Mostrar informaci√≥n del deployment
Write-Host ""
Write-Host "üìä Informaci√≥n del deployment:" -ForegroundColor Cyan
npx serverless info --stage $Stage --region $Region --aws-profile $Profile

# Mostrar endpoints
Write-Host ""
Write-Host "üîó Endpoints disponibles:" -ForegroundColor Cyan
Write-Host "  - ElasticSearch API: https://API_GATEWAY_URL/dev/search/{tenant_id}"
Write-Host "  - Athena Analytics: https://API_GATEWAY_URL/dev/analytics/{tenant_id}"

if ($Stage -eq "dev") {
    Write-Host "  - ElasticSearch Local: http://localhost:9200"
    Write-Host "  - Kibana Local: http://localhost:5601"
}

Write-Host ""
Write-Host "üéâ Deployment completado exitosamente!" -ForegroundColor Green
Write-Host ""
Write-Host "üìù Pr√≥ximos pasos:" -ForegroundColor Yellow
Write-Host "  1. Configurar los endpoints en tu aplicaci√≥n frontend"
Write-Host "  2. Probar la ingesta de datos usando los microservicios existentes"
Write-Host "  3. Verificar que los datos se est√°n indexando en ElasticSearch"
Write-Host "  4. Revisar los logs de las funciones Lambda"
Write-Host ""
Write-Host "Para ver los logs en tiempo real:" -ForegroundColor Cyan
Write-Host "  npx serverless logs -f productStreamProcessor --stage $Stage --tail"
Write-Host "  npx serverless logs -f purchaseStreamProcessor --stage $Stage --tail"
