service: adrianurbinamendoza

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'prod'}
  # AWS Academy Configuration
  roleArn: arn:aws:iam::${aws:accountId}:role/LabRole
  environment:
    S3_BUCKET: ${self:custom.s3Bucket}
    DYNAMODB_TABLE_PRODUCTOS: ${self:custom.dynamoTableProductos}
    DYNAMODB_TABLE_COMPRAS: ${self:custom.dynamoTableCompras}
    DYNAMODB_TABLE_PRODUCT_SEARCH: ${self:custom.dynamoTableProductSearch}
    ATHENA_DATABASE: ${self:custom.athenaDatabase}
    ATHENA_OUTPUT_LOCATION: ${self:custom.athenaOutputLocation}
    AWS_ACCOUNT_ID: ${aws:accountId}
    STAGE: ${self:provider.stage}

custom:
  s3Bucket: "cloudpf-data-lake-${aws:accountId}"
  dynamoTableProductos: "CloudPF-Products"
  dynamoTableCompras: "CloudPF-Purchases"
  dynamoTableProductSearch: "CloudPF-SearchIndex"
  athenaDatabase: "cloudpf_analytics"
  athenaOutputLocation: "s3://cloudpf-athena-results-${aws:accountId}/"

functions:
  # Lambda para CDC de Productos
  productStreamProcessor:
    handler: cdc-lambda-functions/product-stream-processor.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ProductsTable, StreamArn]
          batchSize: 100
          maximumBatchingWindowInSeconds: 5
          startingPosition: LATEST
    environment:
      FUNCTION_NAME: productStreamProcessor

  # Lambda para CDC de Compras
  purchaseStreamProcessor:
    handler: cdc-lambda-functions/purchase-stream-processor.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PurchasesTable, StreamArn]
          batchSize: 100
          maximumBatchingWindowInSeconds: 5
          startingPosition: LATEST
    environment:
      FUNCTION_NAME: purchaseStreamProcessor

  # API de Búsqueda
  searchApi:
    handler: api-rest/search-api.handler
    events:
      - http:
          path: /search
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                q: true
                tenant_id: true
      - http:
          path: /search/products
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                q: false
                tenant_id: true
      - http:
          path: /search/purchases
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                q: false
                tenant_id: true

resources:
  Resources:
    # Tabla de Productos con Streams
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableProductos}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: codigo
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: codigo
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserProductsIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: user_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # Tabla de Compras con Streams
    PurchasesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableCompras}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: compra_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: fecha
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: compra_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserPurchasesIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: user_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: fecha
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # Tabla de Búsqueda de Productos (Alternativa a ElasticSearch)
    ProductSearchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableProductSearch}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: entity_id
            AttributeType: S
          - AttributeName: entity_type
            AttributeType: S
          - AttributeName: updated_at
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: entity_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TypeIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: entity_type
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
          - IndexName: UpdatedIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: updated_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # S3 Bucket para Data Lake
    DataLakeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Athena Results Bucket
    AthenaResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: cloudpf-athena-results-academy-${aws:accountId}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

plugins:
  - serverless-webpack
  - serverless-offline
